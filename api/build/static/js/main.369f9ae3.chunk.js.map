{"version":3,"sources":["loading.js","eventDropdown.js","poster.js","posters.js","index.js","loading.svg"],"names":["Loading","src","spinner","alt","React","Component","EventDropdown","props","useState","inputValue","setInputValue","error","message","loading","id","regions","map","item","value","webname","key","name","autoComplete","list","onChange","event","target","setRegion","Poster","region","includes","posterRegion","className","href","posterTemplate","download","posterFormat","Posters","setRegions","setError","setLoading","setPosterRegion","useEffect","length","fetch","then","res","json","result","filter","current_event","isLoading","template","ReactDOM","render","document","getElementById","module","exports"],"mappings":"yQAQeA,E,iLAJX,OAAO,yBAAKC,IAAKC,IAASC,IAAI,gB,GAFZC,IAAMC,WCmCbC,EAnCO,SAAAC,GAAU,IAAD,EACOC,mBAAS,IADhB,mBACtBC,EADsB,KACVC,EADU,KAQ7B,OAAIH,EAAMI,MACD,uCAAaJ,EAAMI,MAAMC,SACvBL,EAAMM,QACR,kBAAC,EAAD,MAGL,6BACE,8BACE,8BAAUC,GAAG,aACVP,EAAMQ,QAAQC,KAAI,SAAAC,GAAI,OACrB,4BAAQC,MAAOD,EAAKE,QAASC,IAAKH,EAAKI,MACpCJ,EAAKI,UAIZ,2BACEC,aAAa,KACbJ,MAAOT,EACPc,KAAK,YACLC,SAxBV,SAAsBC,GACpBf,EAAce,EAAMC,OAAOR,OAC3BX,EAAMoB,UAAUF,EAAMC,OAAOR,aCiBlBU,EAtBA,SAAArB,GAGb,OAFkBA,EAAMQ,QAAQC,KAAI,SAAAa,GAAM,OAAIA,EAAOV,WAEvCW,SAASvB,EAAMwB,cAEzB,yBAAKC,UAAU,UACb,uBACEC,KAAI,2CAAsC1B,EAAMwB,aAA5C,YAA4DxB,EAAM2B,eAAlE,QACJR,OAAO,QACPS,SAAQ,UAAK5B,EAAMwB,aAAX,YAA2BxB,EAAM2B,iBAEzC,yBACEjC,IAAG,2CAAsCM,EAAMwB,aAA5C,YAA4DxB,EAAM2B,eAAlE,YAAoF3B,EAAM6B,kBAM9F,MC2CIC,EA3DC,WAAO,IAAD,EACU7B,mBAAS,IADnB,mBACbO,EADa,KACJuB,EADI,OAGM9B,mBAAS,MAHf,mBAGbG,EAHa,KAGN4B,EAHM,OAIU/B,oBAAS,GAJnB,mBAIbK,EAJa,KAIJ2B,EAJI,OAMoBhC,mBAAS,IAN7B,mBAMbuB,EANa,KAMCU,EAND,OAOoBjC,mBAAS,OAP7B,mBAOb4B,EAPa,UASpBM,qBAAU,WACc,GAAlB3B,EAAQ4B,QACVC,MAAM,0CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAAAG,GACER,GAAW,GACXF,EAAWU,EAAOC,QAAO,SAAApB,GAAM,OAA4B,MAAxBA,EAAOqB,qBAE5C,SAAAvC,GACE6B,GAAW,GACXD,EAAS5B,SAenB,OACE,oCACE,wDACA,kBAAC,EAAD,CACEA,MAAOA,EACPwC,UAAWtC,EACXE,QAASA,EACTY,UAAWc,IAGb,yBAAKT,UAAU,iBApBD,CAChB,mBACA,kBACA,iBACA,QACA,SACA,WACA,QACA,cAaehB,KAAI,SAACoC,GAAD,OACb,kBAAC,EAAD,CACEhC,IAAKgC,EACLrC,QAASA,EACTgB,aAAcA,EACdG,eAAgBkB,EAChBhB,aAAcA,UCpD1BiB,IAASC,OAAO,kBAAC,EAAD,MAAaC,SAASC,eAAe,U,kBCJrDC,EAAOC,QAAU,IAA0B,sC","file":"static/js/main.369f9ae3.chunk.js","sourcesContent":["import React from \"react\";\nimport spinner from \"./loading.svg\";\nclass Loading extends React.Component {\n  render() {\n    return <img src={spinner} alt=\"Loading\" />;\n  }\n}\n\nexport default Loading;\n","import React, { useState } from \"react\";\nimport Loading from \"./loading.js\";\nconst EventDropdown = props => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  function handleChange(event) {\n    setInputValue(event.target.value);\n    props.setRegion(event.target.value);\n  }\n\n  if (props.error) {\n    return <div>Error: {props.error.message}</div>;\n  } else if (props.loading) {\n    return <Loading />;\n  } else {\n    return (\n      <div>\n        <form>\n          <datalist id=\"eventList\">\n            {props.regions.map(item => (\n              <option value={item.webname} key={item.name}>\n                {item.name}\n              </option>\n            ))}\n          </datalist>\n          <input\n            autoComplete=\"on\"\n            value={inputValue}\n            list=\"eventList\"\n            onChange={handleChange}\n          />\n        </form>\n      </div>\n    );\n  }\n};\n\nexport default EventDropdown;\n","import React from 'react'\n\nconst Poster = props => {\n  const regionIds = props.regions.map(region => region.webname)\n\n  if (regionIds.includes(props.posterRegion)) {\n    return (\n      <div className='poster'>\n        <a\n          href={`http://localhost:50/api/generate/${props.posterRegion}/${props.posterTemplate}/pdf`}\n          target='_self'\n          download={`${props.posterRegion}_${props.posterTemplate}`}\n        >\n          <img\n            src={`http://localhost:50/api/generate/${props.posterRegion}/${props.posterTemplate}/${props.posterFormat}`}\n          />\n        </a>\n      </div>\n    )\n  } else {\n    return null\n  }\n}\n\nexport default Poster\n","import React, { useState, useEffect } from 'react'\nimport EventDropdown from './eventDropdown.js'\nimport Poster from './poster.js'\n// import Download from './download.js'\nconst Posters = () => {\n  const [regions, setRegions] = useState([])\n  // const [templates, setTemplates] = useState([])\n  const [error, setError] = useState(null)\n  const [loading, setLoading] = useState(false)\n\n  const [posterRegion, setPosterRegion] = useState('')\n  const [posterFormat, setPosterFormat] = useState('svg')\n\n  useEffect(() => {\n    if (regions.length == 0) {\n      fetch('https://clear.codeday.org/api/regions/')\n        .then(res => res.json())\n        .then(\n          result => {\n            setLoading(true)\n            setRegions(result.filter(region => region.current_event != null))\n          },\n          error => {\n            setLoading(true)\n            setError(error)\n          }\n        )\n    }\n  })\n  const templates = [\n    'ArtistsMeetBlack',\n    'ArtistsMeetLine',\n    'ArtistsMeetRed',\n    'Blobs',\n    'Outrun',\n    'Scribble',\n    'Space',\n    'lastChance'\n  ]\n  return (\n    <>\n      <h1>CodeDay Poster Generator</h1>\n      <EventDropdown\n        error={error}\n        isLoading={loading}\n        regions={regions}\n        setRegion={setPosterRegion}\n      />\n      {/* <Download regions={regions} posterRegion={posterRegion} /> */}\n      <div className='posterGallery'>\n        {templates.map((template) => (\n          <Poster\n            key={template}\n            regions={regions}\n            posterRegion={posterRegion}\n            posterTemplate={template}\n            posterFormat={posterFormat}\n          />\n        ))}\n      </div>\n    </>\n  )\n}\nexport default Posters\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Posters from \"./posters.js\";\nReactDOM.render(<Posters />, document.getElementById(\"root\"));\n","module.exports = __webpack_public_path__ + \"static/media/loading.1dca6e5e.svg\";"],"sourceRoot":""}